                                               Dark Hell

Разработчики: Вернель Павел

Игра представляет из себя top-down шутер с бесконечным режимом игры.
Особенность игры заключется в технологии raycasting'а, которая позволяет создавать эффект
видимой зоны перед игроком, а также в постепенном улучшении оружия в процессе игры

Структура:

1) Raycasting
Для вычисления графики используется модуль RayCasting, включающим в себя функцию ray_cycle(),
в которой происходят вычисления цикла рейкастинга, а также в модуле присутствует функция in_view()
для проверки нахождения объектов в зоне видимости

2) Для построения уровня используется класс Level, в котором основными методами являются
метод для загрузки карты из файла create_level(), метод merge_rects() - склеивает соседние стенки в
одну для оптимизации расчетов столкновений, метод distance_to_player() - рассчитывает расстояние до
игрока в любой точке карты

3) Класс SpawnPoint отвечает за точки спавна врагов, которые спавнят врагов с некоторым промежутком
времени, зависящим от сложности игры

4) Класс Drop отвечает за спавн дропов с врагов, обладает различными методами для изменения
характеристик оружия персонажа, а также списком дропов, разделенных по редкости

5) Класс Wall отвечает за стенки на карте

6) Класс Floor отвечает за генерацию пола. В методе create_floor() происходит склейка спрайтов
пола под разрешение экрана

7) Класс Character отвечает за одинаковые функции персонажа и врагов

8) Класс Player, наследованный от Character, отвечает за игрока, здесь задаются основные
характеристики игрока, в методе move_character() происходит регистрация управления игрока, в методе
ray_cast() происходит отрисовка полигона рейкаста, shoot() отвечает за стрельбу, в методе update()
происходит обновление всех параметров

9) Класс Enemy, наследованный от Character, отвечает за врагов, здесь задаются основыне
характеристики врага в методе move() происходит определение передвижения врага, метод attack()
отвечает за атаку игрока, метод bleed() отвечает за эффект кровотечения, в методе update()
происходит обновление всех параметров

10) Класс Weapon отвечает за харкатеристики оружия и его поведение при стрельбе

11) Класс BouncingObject отвечает за поведение "летающих" объектов, здесь происходит вычисление
рикошета в методе bounce()

12) Класс Blood, отнаследованный от BouncingObject, отвечает за спрайты крови

13) Класс Bullet, отнаследованный от BouncingObject, отвечает за поведение пули

14) Класс Widget отвечает за виждеты

15) Класс Interface, отнаследованный от Widget, отвечает за отрисовку интерфейса игры

16) Класс Button, отнаследованный от Widget, отвечает за кликабельные кнопки

17) Функция go_game() отвечает за основной цикл игры

18) Функция clear_groups() чистит группы спрайтов

19) Функция load_image() загружает изображения

20) Функция start_menu() отвечает за цикл главного меню

21) Функция init_globals() инициализирует глобальный переменные